@page
@model MCFTAcademics.GradeByStudentId
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@{
    ViewData["Title"] = "Grades by Student";
}
@using System.Collections;
@using BL;
@{
    IEnumerable<Grade> gradeList = null;
    Student studentUser = null;
    if (Model.s != null)
    {
        studentUser = @Model.s;
        gradeList = studentUser.GetGrades();
        gradeList = gradeList.OrderBy(Grade => Grade);

    }
    int rowCounter = 1;
}

<h1>Grade By Student Id</h1>
<div asp-validation-summary="All" class="text-danger"></div>
<br>
<form class="form-inline" id="form" method="post">
    <div class="form-group">
        <label for="studentCode">Student ID</label>
        <input class="form-control" style="width:200px" type="text" required name="studentCode" placeholder="i.e. ST98404" id="studentCode">
    </div>
    <button class="btn btn-primary" id="searchById" type="submit">Search</button>
</form>
@if (studentUser != null)
{
    <h2>@studentUser.StudentCode: @studentUser.FirstName @studentUser.LastName</h2>
    <input id="studentIdHolder" type="hidden" value="@studentUser.Id">
    <table class="table">
        <thead>
            <tr>
                <th scope="col" width="5%">Semester</th>
                <th scope="col" width="15%">Course Code</th>
                <th scope="col" width="20%">Subject</th>
                <th scope="col" width="20%">Instructor</th>
                <th scope="col" width="10%">Grade</th>
                <th scope="col" width="30%">Comment</th>
            </tr>
        </thead>
        <tbody>
            @foreach (Grade g in gradeList)
            {
                CourseCode code = g.Subject.GetCourseCode();
                if (g.Subject != null && g.Locked)
                {
                    <tr>
                        <th scope="row">@code.Semester</th>
                        <th scope="row">@code.Code</th>
                        <td>@g.Subject.Name</td>
                        <td>@g.Subject.GetLeadStaff().Name</td>
                        <td>@g.GradeAssigned</td>
                        <td>Grade is Locked</td>
                    </tr>
                    rowCounter++;
                }
                else if (g.Subject != null && !g.Locked)
                {
                    <tr>
                        <th scope="row">@code.Semester</th>
                        <th scope="row">@code.Code</th>
                        <td>@g.Subject.Name</td>
                        <td>@g.Subject.GetLeadStaff().Name</td>
                        <td>
                            <div class="form-group">
                                <label class="sr-only" for="grade@g.Subject.Id">Grade</label>
                                @* i would use onblur here, but onfocus makes the tabstop work right *@
                                <input id="grade@g.Subject.Id" class="input-sm form-control gradeField" onfocus="activateComment(this)" type="number" value="@g.GradeAssigned" name="gradeField" form="form@g.Subject.Id" />
                            </div>
                        </td>
                        <td>
                            @* XXX: Good oppurtunity now for a JS-free fallback... *@
                            <form class="form-inline hidden" id="form@g.Subject.Id" onsubmit="return submitGrade(this)">
                                <input type="hidden" class="courseField" name="courseId" value="@g.Subject.Id" />
                                <div class="input-group" style="width: 100%">
                                    <label class="sr-only" for="comment@g.Subject.Id">Comment</label>
                                    <input class="input-sm form-control commentField" placeholder="comment on changes" type="text" required name="commentField" id="comment@g.Subject.Id">
                                    <span class="input-group-btn">
                                        <button type="submit" class="btn btn-sm btn-danger">Submit</button>
                                    </span>
                                </div>
                            </form>
                        </td>
                    </tr>
                    rowCounter++;
                }
            }
        </tbody>
    </table>
}

@section scripts{
    <link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/1.10.20/css/jquery.dataTables.css">
    <script type="text/javascript" charset="utf8" src="https://cdn.datatables.net/1.10.20/js/jquery.dataTables.js"></script>
    <script type="text/javascript">
        $(document).ready(function () {
            $('.table').DataTable();
            $("[name='commentField']").each(function () {
                //not used for anything(yet)
            });
        });

        submitGrade = function (formObj) {
            var grade = $(formObj).parent().parent().find('.gradeField').val();
            var comment = $(formObj).find('.commentField').val();
            var courseId = $(formObj).find('.courseField').val();
            var studentId = $("#studentIdHolder").val();
            console.log(studentId);
            if (confirm("Do you want to submit this change?")) {

                $.ajax({
                    type: "GET",
                    url: "/GradesByStudentId?handler=Ajax&grade=" + grade + "&studentId=" + studentId + "&comment=" + comment + "&courseId=" + courseId,
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    success: function (response) {
                        alert(response);

                    },
                    error: function (response, status, error) {
                        alert(response.responseJSON.error);
                    }
                });
            }
            return false;
        }

        activateComment = function (entry) {
            var entryElem = $(entry);
            // valid number?
            if (!isNaN(parseInt(entryElem.val()))) {
                // XXX: ugly ugly ugly
                entryElem.parent().parent().next().children().removeClass("hidden");
            }
        }
    </script>
}